# Rename this project below to match the name of your Snowflake database or
# a name that closely reflects the intended use of your data product(s).
# Project names should contain only lowercase characters and underscores. 
# Do not modify the version and config-version below.

name: 'my_project_name'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project. 
# In dbt Cloud IDE, this field is unused. However, it is critical with DBT Core.
profile: 'my_project_profile'

# Variables that can be used in models or other objects
vars:
  
  # The following sets of variables (i.e. folder names, suffixes, & prefixes) are used with the package "dbt_project_evaluator".
  # To add a new "layer", update the variable list_layers and create new variables with the names <layer>_folder_name and/or <layer>_prefixes 
  model_types: ['raw', 'data_products', 'transform']

  raw_folder_name: 'raw'
  transform_folder_name: 'transform'
  data_products_folder_name: 'data_product'

  raw_suffixes: ['_raw']
  transform_suffixes: ['_rslt']
  data_products_suffixes: ['_fct', '_dim', '_dmt']
  other_suffixes: ['_oth']
  
  # Following is an example defining a `start_date` variable, accessible in all resources.
  # For example, this variable could be referenced as filter within a SQL WHERE clause of a model.
  start_date: '2016-06-01'
 
  # Following is an example defining a `platform` variable, accessible in all resources
  # accessible only to resources in the project 'my_project_name'
  my_project_name:
    platforms: ['web', 'mobile']
    dev_db: 'dbt_dev'
    prod_db: 'dbt_prod'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You should not need to modify these variables.
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

# directory which will store compiled SQL files
target-path: "target"  

# directories to be removed by `dbt clean`
clean-targets:         
    - "target"
    - "dbt_modules"

# on-run-start and on-run-end are SQL statement(s) or macros that run at the beginning or end of 
# dbt run/dbt/seed/dbt snapshot commands. 
# Full documentation: https://docs.getdbt.com/reference/project-configs/on-run-start-on-run-end

on-run-end:
  # - "{{ grant_all_on_schemas(schemas, 'public') }}"
  # - "{{ dbt_artifacts.upload_results(results) }}"

# Configuring seeds 
# Full documentation: https://docs.getdbt.com/docs/building-a-dbt-project/seeds
seeds:
# This declares that column names in the seed file will not be quoted when the table is created.
  +quote_columns: false

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this config, we tell dbt how to build the models, where to build them, which Snowflake warehouse 
# to use, and what Snowflake query tag to provide on the snowflake site. 
# These settings can be overridden in the individual model files using the `{{ config(...) }}` macro. 

models:
  
  # When you rename the project at the beginning of this yaml file, remember to rename it here too. 
  # All configurations under "my_project_name" apply only to "my_project_name"
  my_project_name:
    transform:
      # This configuration builds every model under the tranform directory into Snowflake schema named "transform".
      # learn more about custom schemas: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/using-custom-schemas
      schema: transform

        # Applies to all files under models/transform/layer_2 folder
        layer_2:

          # This defaults every model in the layer_2 directory to be materialized as a table in Snowflake. 
          # To learn more about materializations: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/materializations
          +materialized: table




        layer_1:
          # Applies to all files under models/transform/layer_1 folder 
          +materialized: view
          # This defaults every model in the staging directory to be materialized as a view in Snowflake. To learn more about materializations: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/materializations
          schema: transform
          # This configuration builds every model in the staging directory into a schema named staging_<target_schema>
          # learn more about custom schemas: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/using-custom-schemas
          query_tag: dbt_transform
          # This applies a query tag named `dbt_staging` to any related queries in Snowflake's Query_History
          # learn more about query tags: https://docs.getdbt.com/reference/resource-configs/snowflake-configs#query-tags
          snowflake_warehouse: compute_wh
          # This specifies which Snowflake warehouse should be used to execute models in staging by overriding the default warehouse defined in the connection.
          # learn more about configuring warehouses: https://docs.getdbt.com/reference/resource-configs/snowflake-configs#configuring-virtual-warehouses
          tags: "daily"
          # You can apply tags to models, snapshots, seeds. This allows you to run based on the tag such as `dbt run --model tag:daily` which would let you run all the models tagged "daily"
          # learn more about tags: https://docs.getdbt.com/reference/resource-configs/tags#definition
      data_product:
          schema: data_product
          # This configuration builds every model in the transform directory into a schema named transform_<target_schema>
          core:
          # Applies to all files under models/marts/core
            +materialized: table
            # This defaults every model in the marts/core directory to be materialized as a table in Snowflake
            query_tag: dbt_marts   
            # This applies a query tag named `dbt_marts` to any related queries in Snowflake's Query_History       
  dbt_project_evaluator:
    schema: project_evaluator
  # pre-hook: "{{ logging.log_model_start_event() }}"
  # post-hook: "{{ logging.log_model_end_event() }}"
